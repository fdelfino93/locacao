from pathlib import Path
import re

path = Path("main.py")
text = path.read_text(encoding="utf-8")
pattern = re.compile(r"@app.post\("/api/imoveis"\)\s+async def criar_imovel\([\s\S]+?return \{\"data\": novo_imovel, \"success\": True\}\n", re.MULTILINE)
match = pattern.search(text)
if not match:
    raise SystemExit('criar_imovel block not found')
new_block = "@app.post(\"/api/imoveis\")\nasync def criar_imovel(imovel: ImovelCreate, current_user: Optional[TokenData] = Depends(get_current_user_optional)):\n    try:\n        contexto = _resolver_contexto_multitenancy(current_user)\n        permissoes = contexto[\"permissoes\"]\n        _exigir_permissao(permissoes, \"cadastrar\", \"Usuario sem permissao para cadastrar imoveis.\")\n\n        imovel_data = imovel.model_dump(exclude_none=True)\n        if contexto.get(\"ver_todas_empresas\"):\n            empresa_id = imovel_data.get('empresa_id') or contexto.get(\"empresa_id\")\n        else:\n            empresa_id = contexto.get(\"empresa_id\")\n        if not empresa_id:\n            raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST,\n                                detail=\"Empresa do usuario nao definida para cadastro de imoveis.\")\n        imovel_data['empresa_id'] = empresa_id\n\n        # Campos compostos enviados pelo frontend\n        if imovel_data.get('dados_gerais'):\n            dados_gerais = imovel_data.pop('dados_gerais')\n            imovel_data['quartos'] = dados_gerais.get('quartos', 0)\n            imovel_data['suites'] = dados_gerais.get('suites', 0)\n            imovel_data['banheiros'] = dados_gerais.get('banheiros', 0)\n            imovel_data['salas'] = dados_gerais.get('salas', 0)\n            imovel_data['cozinha'] = dados_gerais.get('cozinha', 0)\n            imovel_data['vagas_garagem'] = dados_gerais.get('qtd_garagem', 0)\n            imovel_data['tem_sacada'] = dados_gerais.get('tem_sacada', False)\n            imovel_data['qtd_sacada'] = dados_gerais.get('qtd_sacada', 0)\n            imovel_data['tem_churrasqueira'] = dados_gerais.get('tem_churrasqueira', False)\n            imovel_data['qtd_churrasqueira'] = dados_gerais.get('qtd_churrasqueira', 0)\n            mobiliado_str = dados_gerais.get('mobiliado', 'nao')\n            imovel_data['mobiliado'] = mobiliado_str.lower() == 'sim'\n            if 'permite_pets' not in imovel_data or not imovel_data['permite_pets']:\n                imovel_data['permite_pets'] = dados_gerais.get('permite_pets', False)\n\n        locadores_data = imovel_data.pop('locadores', [])\n        if locadores_data:\n            imovel_data['locadores'] = locadores_data\n            print(f\"Enviando {len(locadores_data)} locadores para o repository: {locadores_data}\")\n\n        novo_imovel = inserir_imovel(**imovel_data)\n        return {\"data\": novo_imovel, \"success\": True}\n    except HTTPException:\n        raise\n    except Exception as e:\n        print(f\"Erro ao criar imovel: {e}\")\n        raise HTTPException(status_code=500, detail=f\"Erro ao criar imovel: {str(e)}\")\n\n"
text = text[:match.start()] + new_block + text[match.end():]
path.write_text(text, encoding="utf-8")
