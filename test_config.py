#!/usr/bin/env python3
"""
Script de teste para verificar se as configura√ß√µes de ambiente est√£o funcionando corretamente
"""

import os
import sys
from dotenv import load_dotenv

def test_environment_config():
    """Testa se as vari√°veis de ambiente est√£o configuradas corretamente"""

    print("TESTE DE CONFIGURACAO DE AMBIENTE")
    print("=" * 50)

    # Carregar arquivo .env
    load_dotenv()

    # Verificar se o arquivo .env existe
    env_file = ".env"
    env_example = ".env.example"

    if os.path.exists(env_file):
        print(f"OK - Arquivo {env_file} encontrado")
    else:
        print(f"‚ùå Arquivo {env_file} N√ÉO encontrado")
        print(f"üìù Execute: cp {env_example} {env_file}")
        return False

    if os.path.exists(env_example):
        print(f"‚úÖ Arquivo {env_example} encontrado")
    else:
        print(f"‚ùå Arquivo {env_example} N√ÉO encontrado")

    print("\nüîç VERIFICANDO VARI√ÅVEIS DE AMBIENTE:")
    print("-" * 40)

    # Vari√°veis obrigat√≥rias
    required_vars = [
        "DB_DRIVER",
        "DB_SERVER",
        "DB_DATABASE",
        "DB_USER",
        "DB_PASSWORD",
        "DB_ENCRYPT",
        "DB_TRUST_CERT"
    ]

    all_ok = True

    for var in required_vars:
        value = os.getenv(var)
        if value:
            # Mascarar senha
            if "PASSWORD" in var:
                masked_value = "*" * len(value)
                print(f"‚úÖ {var}={masked_value}")
            else:
                print(f"‚úÖ {var}={value}")
        else:
            print(f"‚ùå {var}=N√ÉO DEFINIDA")
            all_ok = False

    print("\nüîó TESTANDO CONEX√ÉO COM BANCO:")
    print("-" * 40)

    if all_ok:
        try:
            # Tentar importar e testar conex√£o
            from repositories_adapter import get_conexao

            with get_conexao() as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT 1 as teste")
                result = cursor.fetchone()

                if result and result[0] == 1:
                    print("‚úÖ Conex√£o com banco de dados FUNCIONANDO")
                    print(f"üè¢ Servidor: {os.getenv('DB_SERVER')}")
                    print(f"üóÉÔ∏è Banco: {os.getenv('DB_DATABASE')}")
                    return True
                else:
                    print("‚ùå Erro na consulta de teste")
                    return False

        except Exception as e:
            print(f"‚ùå Erro na conex√£o: {str(e)}")
            print("\nüí° POSS√çVEIS SOLU√á√ïES:")
            print("   1. Verificar se o SQL Server est√° rodando")
            print("   2. Verificar credenciais no arquivo .env")
            print("   3. Verificar se o banco de dados existe")
            print("   4. Verificar permiss√µes do usu√°rio")
            return False
    else:
        print("‚ùå Configure todas as vari√°veis no arquivo .env primeiro")
        return False

def test_frontend_config():
    """Testa se a configura√ß√£o do frontend est√° correta"""

    print("\nüåê TESTE DE CONFIGURA√á√ÉO DO FRONTEND")
    print("=" * 50)

    frontend_env = "frontend/.env"
    frontend_example = "frontend/.env.example"

    if os.path.exists(frontend_example):
        print(f"‚úÖ Arquivo {frontend_example} encontrado")
    else:
        print(f"‚ùå Arquivo {frontend_example} N√ÉO encontrado")

    if os.path.exists(frontend_env):
        print(f"‚úÖ Arquivo {frontend_env} encontrado")

        # Ler configura√ß√£o do frontend
        with open(frontend_env, 'r') as f:
            content = f.read()
            print(f"üìÑ Conte√∫do:\n{content}")
    else:
        print(f"‚ö†Ô∏è  Arquivo {frontend_env} n√£o encontrado (configura√ß√£o autom√°tica ser√° usada)")

if __name__ == "__main__":
    print("üöÄ INICIANDO TESTE DE CONFIGURA√á√ÉO\n")

    backend_ok = test_environment_config()
    test_frontend_config()

    print("\n" + "=" * 50)
    if backend_ok:
        print("üéâ CONFIGURA√á√ÉO BACKEND: OK")
        print("‚úÖ Sistema pronto para uso!")
        print("\nüíª Para iniciar o sistema:")
        print("   1. Backend: python main.py")
        print("   2. Frontend: cd frontend && npm run dev")
    else:
        print("‚ùå CONFIGURA√á√ÉO BACKEND: ERRO")
        print("üîß Configure o arquivo .env antes de continuar")

    sys.exit(0 if backend_ok else 1)